


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010  ;Máscara - Activar 
                                                            IRQ's
    3 00000000 FFFFF014 
                       VICIntEnClr
                               EQU              0xFFFFF014  ;Máscara - Descativ
                                                            ar IRQ's
    4 00000000 FFFFF018 
                       VICSoftInt
                               EQU              0xFFFFF018  ;Generar IRQ's Medi
                                                            ante Software
    5 00000000 FFFFF01C 
                       VICSoftIntClr
                               EQU              0xFFFFF01C  ;Bajar peticiones I
                                                            RQ's Software
    6 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100  ;Vector interrupcio
                                                            nes
    7 00000000 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030  ;Reg. E.O.I.
    8 00000000 E0004000 
                       T0_IR   EQU              0xE0004000  ;Reg. Control Timer
                                                             0, escribiendo 1 s
                                                            e baja la petición
    9 00000000 E001C008 
                       DATA_boton
                               EQU              0xE001C008  ;Direccion en la qu
                                                            e se almacena el có
                                                            digo de boton pulsa
                                                            do (del 1 al 7)
   10 00000000 E001C018 
                       TEC_CTR EQU              0xE001C018  ;Bajar peticiones e
                                                            n el registro de co
                                                            ntrol del teclado
   11 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    cuerpo  SPACE            512         ;reserva 512 bytes 
                                                            de memoria, (tamaño
                                                             maximo que podria 
                                                            llegar a tener el g
                                                            usano)
   12 00000200 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 T_Saltos
                               DCD              Boton1, Boton2, Boton3, Boton4,
 Boton5, Boton6, Boton7
   13 0000021C 40007EEF 
                       Posicion_INI
                               DCD              0x40007EEF  ;posición inicial d
                                                            el caracter '@'
   14 00000220 00000001 
                       k       DCD              1           ;tamaño actual del 
                                                            gusano (inicialment
                                                            e 1)
   15 00000224 40007E00 
                       Pantalla
                               DCD              0x40007E00  ;Direccion de inici
                                                            o de la pantalla (1
                                                            6 filas y 32 column
                                                            as)



ARM Macro Assembler    Page 5 


   16 00000228 00000000 
                       reloj_so
                               DCD              0           ;Almacena @RSI_relo
                                                            j del S.O.
   17 0000022C 00000000 
                       reloj   DCD              0           ;contador de centes
                                                            imas de segundo
   18 00000230 00000000 
                       boton_so
                               DCD              0           ;Almacena @RSI_boto
                                                            n del S.O.
   19 00000234 00000008 
                       max     DCD              8           ;velocidad de mov. 
                                                            caracter '@' (en ce
                                                            ntesimas s.) (inici
                                                            almente 0.08s)
   20 00000238 00      dirx    DCB              0           ;direccion mov. car
                                                            acter  '@' (-1 izda
                                                            ., 0 stop, 1 der.)
   21 00000239 00      diry    DCB              0           ;direccion mov. car
                                                            acter  '@' (-1 arri
                                                            ba, 0 stop, 1 abajo
                                                            )
   22 0000023A 07      fila_actual
                               DCB              7           ;numero de fila en 
                                                            la que se encuentra
                                                             el caracter '@' (i
                                                            nicialmente 7)
   23 0000023B 0F      columna_actual
                               DCB              15          ;numero de columna 
                                                            en la que se encuen
                                                            tra el caracter '@'
                                                             (inicialmente 15)
   24 0000023C 00      fin     DCB              0           ;indicador fin de p
                                                            rograma (si vale 1)
                                                             
   25 0000023D 00      k_counter
                               DCB              0           ;Cuenta el numero d
                                                            e movimientos hasta
                                                             el proximo aumento
                                                             del cuerpo (5 movi
                                                            mientos)
   26 0000023E 00      flag_start
                               DCB              0           ;Se pone a uno al p
                                                            resionar el primer 
                                                            botón, cuando se vu
                                                            elve a empezar se v
                                                            uelve a poner a 0
   27 0000023F         
   28 0000023F         
   29 0000023F                 AREA             codigo,CODE
   30 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   31 00000000         inicio
   32 00000000         ;programar @IRQ1 -> RSI_boton
   33 00000000         ;programar @IRQ4 -> RSI_reloj
   34 00000000         ;activar IRQ1, IRQ4
   35 00000000         
   36 00000000         ;Guardar VI[1] en boton_so



ARM Macro Assembler    Page 6 


   37 00000000 E59F0470        LDR              r0,=VICVectAddr0 
                                                            ;r0=@VICVectAddr0
   38 00000004 E59F1470        LDR              r1,=boton_so ;r1=@boton_so
   39 00000008 E3A02001        mov              r2,#1       ;r2 = nºIRQ de SW I
                                                            nterrupt = 1
   40 0000000C E7903102        ldr              r3,[r0,r2,LSL#2] 
                                                            ;r3=@RSI1 del S.O.
   41 00000010 E5813000        str              r3,[r1]     ;boton_so = @RSI1 d
                                                            el S.O.
   42 00000014         
   43 00000014         ;VI[1]=@RSI_boton (creada por mi)
   44 00000014 E59F1464        LDR              r1,=RSI_boton ;Coloco en el vec
                                                            tor de Interrupcion
                                                            es la RSI creada po
                                                            r mi
   45 00000018 E7801102        str              r1,[r0,r2,LSL#2]
   46 0000001C         
   47 0000001C         ;Guardar VI[4] en reloj_so
   48 0000001C E59F1460        LDR              r1,=reloj_so ;r1=@reloj_so
   49 00000020 E3A02004        mov              r2,#4       ;r2 = nºIRQ del tim
                                                            er = 4
   50 00000024 E7903102        ldr              r3,[r0,r2,LSL#2] 
                                                            ;r3=@RSI4 del S.O.
   51 00000028 E5813000        str              r3,[r1]     ;reloj_so = @RSI4 d
                                                            el S.O.
   52 0000002C         
   53 0000002C         ;VI[4]=@RSI_reloj (creada por mi)
   54 0000002C E59F1454        LDR              r1,=RSI_reloj ;Coloco en el vec
                                                            tor de Interrupcion
                                                            es la RSI creada po
                                                            r mi
   55 00000030 E7801102        str              r1,[r0,r2,LSL#2]
   56 00000034         
   57 00000034         ;Habilitar máscara para IRQ1 e IRQ4
   58 00000034 E59F0450        LDR              r0,=VICIntEnable
   59 00000038 E3A01012        mov              r1,#2_10010
   60 0000003C E5801000        str              r1,[r0]     ;Mascara[4]=1 y Mas
                                                            cara[1]=1, el resto
                                                             se queda igual
   61 00000040         
   62 00000040         
   63 00000040         ;Borrado de pantalla --> Clrear Screen (Clrscr)
   64 00000040 E3A01020        mov              r1,#32
   65 00000044 E59F2444        LDR              r2,=Pantalla
   66 00000048 E5920000        ldr              r0,[r2]
   67 0000004C E3A02C02        mov              r2,#16*32
   68 00000050 E0802002        add              r2,r0,r2
   69 00000054         
   70 00000054 E5C01000 
                       Clrscr  strb             r1,[r0]
   71 00000058 E2800001        add              r0,r0,#1
   72 0000005C E1500002        cmp              r0,r2
   73 00000060 1AFFFFFB        bne              Clrscr
   74 00000064         
   75 00000064         
   76 00000064         
   77 00000064         
   78 00000064         comienzo                             ;Ponemos el timer a
                                                             0 al comienzo 



ARM Macro Assembler    Page 7 


   79 00000064 E59F1428        LDR              r1,=reloj
   80 00000068 E3A00000        mov              r0,#0
   81 0000006C E5810000        str              r0,[r1]
   82 00000070         
   83 00000070         ;Dibujamos el caracter al comienzo
   84 00000070 E3A00040        mov              r0,#64      ;r0 = caracter '@' 
                                                            
   85 00000074 E59F141C        LDR              r1,=Posicion_INI
   86 00000078 E5911000        ldr              r1,[r1]     ;r1=Posicion inicia
                                                            l
   87 0000007C E5C10000        strb             r0,[r1]
   88 00000080 E59F0414        LDR              r0,=cuerpo
   89 00000084 E5801000        str              r1,[r0]
   90 00000088         
   91 00000088 E59F1410        LDR              r1,=flag_start ;Comienza si se 
                                                            ha presionado algún
                                                             botón
   92 0000008C E5D11000        ldrb             r1,[r1]
   93 00000090 E3510001        cmp              r1,#1
   94 00000094 1AFFFFF2        bne              comienzo
   95 00000098         
   96 00000098         
   97 00000098         ;-------------------------------------------------------
                       --------------
   98 00000098         ;----Inicio del bucle que se encarga de la ejecución del
                        programa-----
   99 00000098         ;-------------------------------------------------------
                       --------------
  100 00000098         
  101 00000098         ;si fin=1 salto a fin_bucle
  102 00000098 E59F1404 
                       bucle   LDR              r1,=fin
  103 0000009C E5D11000        ldrb             r1,[r1]
  104 000000A0 E3510001        cmp              r1,#1
  105 000000A4 0A000089        beq              fin_bucle
  106 000000A8         
  107 000000A8         ;Compara el reloj para saber si toca mover caracter
  108 000000A8 E59F13E4        LDR              r1,=reloj   ;Carga el número de
                                                             centésimas contada
                                                            s
  109 000000AC E5911000        ldr              r1,[r1]
  110 000000B0 E59F03F0        LDR              r0,=max     ;Busca el número de
                                                             centésimas necesar
                                                            ias para dar el sig
                                                            uiente movimiento
  111 000000B4 E5900000        ldr              r0,[r0]
  112 000000B8 E1510000        cmp              r1,r0       ;Las compara, si no
                                                             se llega al numero
                                                             de centesimas nece
                                                            sarias se vuelve al
                                                             principio del bucl
                                                            e
  113 000000BC 9AFFFFF5        bls              bucle
  114 000000C0         
  115 000000C0         ;-------------------------------
  116 000000C0         ;--- Se inicia el movimiento ---
  117 000000C0         ;-------------------------------
  118 000000C0         
  119 000000C0         ;Volvemos a poner el contador a 0



ARM Macro Assembler    Page 8 


  120 000000C0 E59F13CC        LDR              r1,=reloj
  121 000000C4 E3A00000        mov              r0,#0
  122 000000C8 E5810000        str              r0,[r1]
  123 000000CC         
  124 000000CC         ;Actualizamos k_counter para el tamaño del gusano
  125 000000CC E59F03D8        LDR              r0,=k_counter
  126 000000D0 E5D01000        ldrb             r1,[r0]
  127 000000D4 E2811001        add              r1,r1,#1
  128 000000D8 E3510005        cmp              r1,#5
  129 000000DC 1A000004        bne              no_aumenta  ;Si el tamaño no ti
                                                            ene que aumentar sa
                                                            ltamos a dicha etiq
                                                            ueta
  130 000000E0 E3A01000        mov              r1,#0
  131 000000E4         
  132 000000E4 E59F23C4        LDR              r2,=k       ;Si k_counter igual
                                                             a 5 aumentamos el 
                                                            tamaño en uno
  133 000000E8 E5923000        ldr              r3,[r2]
  134 000000EC E2833001        add              r3,r3,#1
  135 000000F0 E5823000        str              r3,[r2]
  136 000000F4         
  137 000000F4 E5C01000 
                       no_aumenta
                               strb             r1,[r0]     ;k_counter actualiz
                                                            ado en memoria
  138 000000F8         
  139 000000F8         ;Si k_counter distinto de 0 debemos borrar la última pos
                       ición del cuerpo para que no aumente
  140 000000F8 E59F33AC        LDR              r3,=k_counter
  141 000000FC E5D33000        ldrb             r3,[r3]
  142 00000100 E3530000        cmp              r3,#0
  143 00000104 0A000006        beq              no_borrar
  144 00000108         
  145 00000108         ;Borramos la posicion del último caracter 
  146 00000108 E3A01020        mov              r1,#32      ; 32 = espacio en b
                                                            lanco en ASCII
  147 0000010C E59F0388        LDR              r0,=cuerpo
  148 00000110 E59F2398        LDR              r2,=k
  149 00000114 E5922000        ldr              r2,[r2]
  150 00000118 E2422001        sub              r2,r2,#1
  151 0000011C E7904102        ldr              r4,[r0,r2,LSL#2]
  152 00000120 E5C41000        strb             r1,[r4]     ;Borramos únicament
                                                            e la última posició
                                                            n del cuerpo
  153 00000124         
  154 00000124         no_borrar                            ;Actualizamos las p
                                                            osiciones de todo e
                                                            l cuerpo menos de l
                                                            a cabeza
  155 00000124         
  156 00000124 E59F2384        LDR              r2,=k
  157 00000128 E5922000        ldr              r2,[r2]     ;r2=k
  158 0000012C E2422001        sub              r2,r2,#1    ;Arreglo para que s
                                                            i r2=0 T[0]=cabeza
  159 00000130         
  160 00000130 E59F0364        LDR              r0,=cuerpo  ;r0=@cuerpo
  161 00000134 E3520000        cmp              r2,#0
  162 00000138 9A000006        bls              fin_while



ARM Macro Assembler    Page 9 


  163 0000013C         
  164 0000013C         ;-------------------------------------------------------
                       ------------------
  165 0000013C         while                                ;--- Actualizamos l
                                                            a Tabla con las pos
                                                            iciones de cada par
                                                            te del cuerpo ---
  166 0000013C         ;-------------------------------------------------------
                       ------------------
  167 0000013C         
  168 0000013C         ;while(r2>0)
  169 0000013C         
  170 0000013C E2422001        sub              r2,r2,#1    ;r2=r2-1
  171 00000140 E7905102        ldr              r5,[r0,r2,LSL#2] ;r5=T[r2-1]
  172 00000144 E2822001        add              r2,r2,#1    ;r2=r2+1
  173 00000148 E7805102        str              r5,[r0,r2,LSL#2] ;T[r2]=r5
  174 0000014C E2422001        sub              r2,r2,#1    ;r2=r2-1
  175 00000150         
  176 00000150 E3520000        cmp              r2,#0
  177 00000154 8AFFFFF8        bhi              while
  178 00000158         
  179 00000158         ;-------------------------------------------------------
                       -------
  180 00000158         ;--- Calculamos la nueva posicion del caracter de la cab
                       eza ---
  181 00000158         ;-------------------------------------------------------
                       -------    
  182 00000158         
  183 00000158         ;Calculamos la nueva fila:
  184 00000158 E59F2354 
                       fin_while
                               LDR              r2,=fila_actual
  185 0000015C E5D20000        ldrb             r0,[r2]
  186 00000160 E59F1350        LDR              r1,=diry
  187 00000164 E1D110D0        ldrsb            r1,[r1]
  188 00000168 E0811000        add              r1,r1,r0    ;r1=diry+fila_actua
                                                            l
  189 0000016C E3710001        cmp              r1,#-1      ;Si sobrepasa por a
                                                            rriba de la pantall
                                                            a lo colocamos abaj
                                                            o
  190 00000170 03A0100F        moveq            r1,#15
  191 00000174 E3510010        cmp              r1,#16
  192 00000178 03A01000        moveq            r1,#0       ;Si sobrepasa por a
                                                            bajo de la pantalla
                                                             lo colocamos arrib
                                                            a
  193 0000017C E5C21000        strb             r1,[r2]
  194 00000180         
  195 00000180         ;Calculamos la nueva columna:  
  196 00000180 E59F2334        LDR              r2,=columna_actual
  197 00000184 E5D20000        ldrb             r0,[r2]
  198 00000188 E59F3330        LDR              r3,=dirx
  199 0000018C E1D330D0        ldrsb            r3,[r3]
  200 00000190 E0833000        add              r3,r3,r0    ;r3=dirx+columna_ac
                                                            tual
  201 00000194 E3730001        cmp              r3,#-1      ;Si sobrepasa por l
                                                            a izquierda de la p
                                                            antalla lo colocamo



ARM Macro Assembler    Page 10 


                                                            s a la derecha
  202 00000198 03A0301F        moveq            r3,#31
  203 0000019C E3530020        cmp              r3,#32
  204 000001A0 03A03000        moveq            r3,#0       ;Si sobrepasa por l
                                                            a derecha de la pan
                                                            talla lo colocamos 
                                                            a la izquierda
  205 000001A4 E5C23000        strb             r3,[r2]
  206 000001A8         
  207 000001A8         ;Calculamos la posicion final: (r1=numero de fila, r3= n
                       umero de columna)
  208 000001A8 E59F22E0        LDR              r2,=Pantalla ;r2 = @Pantalla   
                                                            
  209 000001AC E0833281        add              r3,r3,r1,LSL#5 ;r3 = r3 + r1*32
                                                            
  210 000001B0 E5921000        ldr              r1,[r2]     ;r1 = Comienzo pant
                                                            alla
  211 000001B4 E0811003        add              r1,r1,r3    ;r1 = Posicion del 
                                                            caracter
  212 000001B8 E59F32DC        LDR              r3,=cuerpo
  213 000001BC E5831000        str              r1,[r3]     ;actualizamos posic
                                                            ion de la cabeza
  214 000001C0         
  215 000001C0         ;-----------------------------------
  216 000001C0         ;---------Dibujo del cuerpo---------
  217 000001C0         ;-----------------------------------
  218 000001C0 E3A03040        mov              r3,#64      ;r3 = caracter '@' 
                                                            
  219 000001C4 E59F02D0        LDR              r0,=cuerpo
  220 000001C8 E5900000        ldr              r0,[r0]
  221 000001CC E5C03000        strb             r3,[r0]     ;dibujamos la cabez
                                                            a
  222 000001D0         
  223 000001D0         ;-------------------------------------
  224 000001D0         ;--------COMPROBAMOS SI CHOCA---------
  225 000001D0         ;-------------------------------------
  226 000001D0         
  227 000001D0         ;Comparamos si la cabeza (T[0]=r1(Posicion)) choca con a
                       lguna parte de su cuerpo (resto de T)
  228 000001D0 E59F02C4        LDR              r0,=cuerpo  ;r0=@cuerpo
  229 000001D4 E5901000        ldr              r1,[r0]     ;r1=T[0]
  230 000001D8 E3A02000        mov              r2,#0       ;r2=i=0
  231 000001DC E59F32CC        LDR              r3,=k
  232 000001E0 E5933000        ldr              r3,[r3]     ;r3=k
  233 000001E4         for                                  ;for(i=1,i<k,i++)
  234 000001E4 E2822001        add              r2,r2,#1    ;i++
  235 000001E8 E1530002        cmp              r3,r2
  236 000001EC 9A000003        bls              fin_for
  237 000001F0         
  238 000001F0 E7904102        ldr              r4,[r0,r2,LSL#2] ;r4=T[i]  
  239 000001F4 E1540001        cmp              r4,r1       ;¿T[i]=T[0]?
  240 000001F8 0A000001        beq              si_choca
  241 000001FC 1AFFFFF8        bne              for
  242 00000200         
  243 00000200 EAFFFFA4 
                       fin_for b                bucle       ;Si no choca vuelve
                                                             a empezar el bucle
                                                            
  244 00000204         



ARM Macro Assembler    Page 11 


  245 00000204         ;-------------------
  246 00000204         si_choca                             ;--- Si se choca --
                                                            -
  247 00000204         ;-------------------    
  248 00000204         
  249 00000204         ;parpadea 4 veces la cabeza durante 0.64 segundos
  250 00000204 E3A03000        mov              r3,#0       ;contador de parpad
                                                            eos
  251 00000208 E3A00010        mov              r0,#16      ;numero de centesim
                                                            as hasta un parpade
                                                            o 
  252 0000020C E59F1280        LDR              r1,=reloj   ;@número de centési
                                                            mas contadas 
  253 00000210         
  254 00000210 E3A05040        mov              r5,#64      ;r5 = caracter '@' 
                                                            
  255 00000214 E3A06020        mov              r6,#32      ;r6 = caracter ' '
  256 00000218         
  257 00000218 E59F427C        LDR              r4,=cuerpo
  258 0000021C E5944000        ldr              r4,[r4]     ;Posición de la cab
                                                            eza
  259 00000220         
  260 00000220         ;Ponemos el timer a 0 al comienzo
  261 00000220 E3A00000 
                       parpadeo
                               mov              r0,#0       ;contador de parpad
                                                            eos, hasta 4.
  262 00000224 E5810000        str              r0,[r1]
  263 00000228         
  264 00000228         
  265 00000228         b_parpadeo1                          ;Compara el reloj p
                                                            ara saber si toca p
                                                            arpadear FASE 1: de
                                                            jarlo en blanco
  266 00000228 E5912000        ldr              r2,[r1]
  267 0000022C E3520004        cmp              r2,#4       ;Las compara, si no
                                                             se llega al numero
                                                             de centesimas nece
                                                            sarias se vuelve al
                                                             principio del bucl
                                                            e
  268 00000230 9AFFFFFC        bls              b_parpadeo1
  269 00000234         
  270 00000234 E5C46000        strb             r6,[r4]     ;Dibujamos el espac
                                                            io en blanco
  271 00000238         
  272 00000238         b_parpadeo2                          ;Compara el reloj p
                                                            ara saber si toca p
                                                            arpadear FASE 1: de
                                                            jarlo en blanco
  273 00000238 E5912000        ldr              r2,[r1]
  274 0000023C E3520008        cmp              r2,#8       ;Las compara, si no
                                                             se llega al numero
                                                             de centesimas nece
                                                            sarias se vuelve al
                                                             principio del bucl
                                                            e
  275 00000240 9AFFFFFC        bls              b_parpadeo2
  276 00000244         



ARM Macro Assembler    Page 12 


  277 00000244 E5C45000        strb             r5,[r4]     ;Dibujamos el carac
                                                            ter '@'
  278 00000248 E2833001        add              r3,r3,#1    ;Sumamos un parpade
                                                            o
  279 0000024C E3530004        cmp              r3,#4
  280 00000250 1AFFFFF2        bne              parpadeo    ;Si no hay cuatro p
                                                            arpadeos se vuelve 
                                                            a empezar   
  281 00000254         
  282 00000254         ;--------------------------
  283 00000254         ;--- Se borra el gusano ---
  284 00000254         ;--------------------------
  285 00000254 E3A01020        mov              r1,#32      ; 32 = espacio en b
                                                            lanco en ASCII
  286 00000258 E59F023C        LDR              r0,=cuerpo  ;r0=@cuerpo
  287 0000025C E3E02000        mov              r2,#-1      ;r2=i=-1
  288 00000260 E59F3248        LDR              r3,=k
  289 00000264 E5933000        ldr              r3,[r3]     ;r3=k
  290 00000268         for2                                 ;for(i=0,i<k,i++)
  291 00000268 E2822001        add              r2,r2,#1    ;i++
  292 0000026C E1530002        cmp              r3,r2
  293 00000270 9A000002        bls              fin_for2
  294 00000274         
  295 00000274 E7904102        ldr              r4,[r0,r2,LSL#2] ;r4=@T[i]
  296 00000278 E5C41000        strb             r1,[r4]     ;T[i]=' '
  297 0000027C 1AFFFFF9        bne              for2
  298 00000280         
  299 00000280         fin_for2                             ;Restauramos los va
                                                            lores iniciales de 
                                                            dirx, diry, k, k_co
                                                            unter, fila actual 
                                                            y columna actual
  300 00000280 E3A02000        mov              r2,#0
  301 00000284 E59F1234        LDR              r1,=dirx
  302 00000288 E5C12000        strb             r2,[r1]
  303 0000028C E59F1224        LDR              r1,=diry
  304 00000290 E5C12000        strb             r2,[r1]
  305 00000294 E59F1210        LDR              r1,=k_counter
  306 00000298 E5C12000        strb             r2,[r1]
  307 0000029C E3A02001        mov              r2,#1
  308 000002A0 E59F1208        LDR              r1,=k
  309 000002A4 E5812000        str              r2,[r1]
  310 000002A8 E3A02007        mov              r2,#7
  311 000002AC E59F1200        LDR              r1,=fila_actual
  312 000002B0 E5C12000        strb             r2,[r1]
  313 000002B4 E3A0200F        mov              r2,#15
  314 000002B8 E59F11FC        LDR              r1,=columna_actual
  315 000002BC E5C12000        strb             r2,[r1]
  316 000002C0         
  317 000002C0         ;Colocamos flag_start a 0
  318 000002C0 E59F11D8        LDR              r1,=flag_start
  319 000002C4 E3A02000        mov              r2,#0
  320 000002C8 E5C12000        strb             r2,[r1]
  321 000002CC         
  322 000002CC         ;vuelvo al principio
  323 000002CC EAFFFF64        b                comienzo
  324 000002D0         
  325 000002D0         ;-----------------------
  326 000002D0         fin_bucle                            ;--- Fin del pogram



ARM Macro Assembler    Page 13 


                                                            a ---
  327 000002D0         ;-----------------------
  328 000002D0         
  329 000002D0         ;desactivar IRQ1,IRQ4
  330 000002D0         ;desactivar RSI_reloj
  331 000002D0         ;desactivar RSI_boton
  332 000002D0         
  333 000002D0         ;Deshabilitar máscara IRQ1 y IRQ4
  334 000002D0 E59F01EC        LDR              r0,=VICIntEnClr
  335 000002D4 E3A01012        mov              r1,#2_10010
  336 000002D8 E5801000        str              r1,[r0]
  337 000002DC         
  338 000002DC         ;Restaurar VI[1] y VI[4]
  339 000002DC E59F0194        LDR              r0,=VICVectAddr0
  340 000002E0 E59F1194        LDR              r1,=boton_so
  341 000002E4 E5911000        ldr              r1,[r1]
  342 000002E8 E3A02001        mov              r2,#1
  343 000002EC E7801102        str              r1,[r0,r2,LSL#2]
  344 000002F0         
  345 000002F0 E59F118C        LDR              r1,=reloj_so
  346 000002F4 E5911000        ldr              r1,[r1]
  347 000002F8 E3A02004        mov              r2,#4
  348 000002FC E7801102        str              r1,[r0,r2,LSL#2]
  349 00000300         
  350 00000300         
  351 00000300 EAFFFFFE 
                       bfin    b                bfin
  352 00000304         
  353 00000304         ;-----------------------------------------
  354 00000304         RSI_reloj                            ;--- RSI reloj, par
                                                            a controlar tiempos
                                                             ---
  355 00000304         ;-----------------------------------------
  356 00000304         
  357 00000304         ;Rutina de servicio a la interrupcion IRQ4 (timer 0)
  358 00000304         ;Cada 0,01s. llega una peticion de interrupcion
  359 00000304         
  360 00000304 E24EE004        sub              lr,lr,#4    ;correccion @retorn
                                                            o
  361 00000308 E52DE004        PUSH             {lr}        ;apilar @retorno
  362 0000030C E14FE000        mrs              r14,spsr
  363 00000310 E52DE004        PUSH             {r14}       ;apilar cpsr PP
  364 00000314 E321F052        msr              cpsr_c,#2_01010010
  365 00000318         
  366 00000318 E92D0003        PUSH             {r0,r1}
  367 0000031C         
  368 0000031C E59F01A4        LDR              r0,=T0_IR
  369 00000320 E3A01001        mov              r1,#1
  370 00000324 E5801000        str              r1,[r0]     ;Bajamos la peticio
                                                            n de  IRQ4
  371 00000328         
  372 00000328 E59F0164        LDR              r0,=reloj   ;Sumamos una centis
                                                            ima a la variable
  373 0000032C E5901000        ldr              r1,[r0]
  374 00000330 E2811001        add              r1,r1,#1
  375 00000334 E5801000        str              r1,[r0]     ;Actualizamos la va
                                                            riable reloj
  376 00000338         
  377 00000338 E8BD0003        POP              {r0,r1}



ARM Macro Assembler    Page 14 


  378 0000033C         
  379 0000033C         ;retorno
  380 0000033C E321F0D2        msr              cpsr_c, #2_11010010 
                                                            ; modo irq I=1
  381 00000340 E49DE004        POP              {r14}
  382 00000344 E16FF00E        msr              spsr_fsxc,r14 ; spsr = cpsr(PP)
                                                            
  383 00000348 E59FE17C        LDR              r14,=VICVectAddr
  384 0000034C E58EE000        str              r14,[r14]
  385 00000350 E8FD8000        POP              {pc}^       ; pc=@ret, ^--> cps
                                                            r = spsr modo super
                                                            visor
  386 00000354         
  387 00000354         ;-------------------------------------------------------
                       ----------------------------------
  388 00000354         RSI_boton                            ;--- RSI boton, par
                                                            a controlar las ent
                                                            radas del usuario a
                                                             través de un tecla
                                                            do virtual ---
  389 00000354         ;-------------------------------------------------------
                       ----------------------------------
  390 00000354         
  391 00000354         ;Rutina de servicio a la interrupcion IRQ1 (SW interrupt
                       )
  392 00000354         ;al pulsar cada boton llega la peticion de interrupcion 
                       IRQ1
  393 00000354         
  394 00000354 E24EE004        sub              lr,lr,#4    ;correccion @retorn
                                                            o
  395 00000358 E52DE004        PUSH             {lr}        ;apilar @retorno
  396 0000035C E14FE000        mrs              r14,spsr
  397 00000360 E52DE004        PUSH             {r14}       ;apilar cpsr PP
  398 00000364 E321F052        msr              cpsr_c,#2_01010010
  399 00000368         
  400 00000368 E92D0007        PUSH             {r0-r2}
  401 0000036C         
  402 0000036C E59F015C        LDR              r0,=DATA_boton ;Leemos el boton
                                                             que se ha pulsado
  403 00000370 E5902000        ldr              r2,[r0]     ; r2 = boton pulsad
                                                            o
  404 00000374         
  405 00000374 E59F1158        LDR              r1,=TEC_CTR ;liberar K_teclado
  406 00000378 E3A00004        mov              r0,#2_100
  407 0000037C E5C10000        strb             r0,[r1]     ;TEC_CTR[2]=1
  408 00000380         
  409 00000380 E59F0150        LDR              r0,=VICSoftIntClr
  410 00000384 E3A01002        mov              r1,#2_10
  411 00000388 E5801000        str              r1,[r0]     ;Bajamos la peticio
                                                            n de  IRQ1
  412 0000038C         
  413 0000038C E59F110C        LDR              r1,=flag_start ;Colocamos el fl
                                                            ag a 1
  414 00000390 E3A00001        mov              r0,#1
  415 00000394 E5C10000        strb             r0,[r1]
  416 00000398         
  417 00000398 E2421001        sub              r1,r2,#1    ; r1 = boton pulsad
                                                            o-1, para indexarlo
                                                             correctamente en l



ARM Macro Assembler    Page 15 


                                                            a talba de saltos
  418 0000039C E59F0138        LDR              r0,=T_Saltos
  419 000003A0 E0800101        add              r0,r0,r1,LSL#2
  420 000003A4 E590F000        ldr              pc,[r0]
  421 000003A8         
  422 000003A8         
  423 000003A8         Boton1                               ;Si es el boton 1 p
                                                            onemos la variable 
                                                            fin a 1
  424 000003A8 E59F00F4        LDR              r0,=fin
  425 000003AC E3A01001        mov              r1,#1
  426 000003B0 E5C01000        strb             r1,[r0]
  427 000003B4 EA000028        b                fin_RSI
  428 000003B8         
  429 000003B8         Boton2                               ;Si es el 2 ponemos
                                                             dirx a -1  para qu
                                                            e se mueva hacia la
                                                             izquierda
  430 000003B8 E59F0100        LDR              r0,=dirx
  431 000003BC E3E01000        mov              r1,#-1
  432 000003C0 E5C01000        strb             r1,[r0]
  433 000003C4 E59F00EC        LDR              r0,=diry    ;Colocamos diry a 0
                                                             porque no esta per
                                                            mitido el movimient
                                                            o en diagonal
  434 000003C8 E3A01000        mov              r1,#0
  435 000003CC E5C01000        strb             r1,[r0]
  436 000003D0 EA000021        b                fin_RSI
  437 000003D4         
  438 000003D4         Boton3                               ;Si es el 3 ponemos
                                                             dirx a 1  para que
                                                             se mueva hacia la 
                                                            derecha
  439 000003D4 E59F00E4        LDR              r0,=dirx
  440 000003D8 E3A01001        mov              r1,#1
  441 000003DC E5C01000        strb             r1,[r0]
  442 000003E0 E59F00D0        LDR              r0,=diry    ;Colocamos diry a 0
                                                             porque no esta per
                                                            mitido el movimient
                                                            o en diagonal
  443 000003E4 E3A01000        mov              r1,#0
  444 000003E8 E5C01000        strb             r1,[r0]
  445 000003EC EA00001A        b                fin_RSI
  446 000003F0         
  447 000003F0         Boton4                               ;Si es el 4 ponemos
                                                             diry a -1  para qu
                                                            e se mueva hacia ar
                                                            riba
  448 000003F0 E59F00C0        LDR              r0,=diry
  449 000003F4 E3E01000        mov              r1,#-1
  450 000003F8 E5C01000        strb             r1,[r0]
  451 000003FC E59F00BC        LDR              r0,=dirx    ;Colocamos dirx a 0
                                                             porque no esta per
                                                            mitido el movimient
                                                            o en diagonal
  452 00000400 E3A01000        mov              r1,#0
  453 00000404 E5C01000        strb             r1,[r0]
  454 00000408 EA000013        b                fin_RSI
  455 0000040C         



ARM Macro Assembler    Page 16 


  456 0000040C         Boton5                               ;Si es el 5 ponemos
                                                             diry a 1  para que
                                                             se mueva hacia aba
                                                            jo
  457 0000040C E59F00A4        LDR              r0,=diry
  458 00000410 E3A01001        mov              r1,#1
  459 00000414 E5C01000        strb             r1,[r0]
  460 00000418 E59F00A0        LDR              r0,=dirx    ;Colocamos dirx a 0
                                                             porque no esta per
                                                            mitido el movimient
                                                            o en diagonal
  461 0000041C E3A01000        mov              r1,#0
  462 00000420 E5C01000        strb             r1,[r0]
  463 00000424 EA00000C        b                fin_RSI
  464 00000428         
  465 00000428         Boton6                               ;Si es el 6 dividim
                                                            os el valor de la v
                                                            ariable max por 2 p
                                                            ara que se mueva má
                                                            s rápido
  466 00000428 E59F0078        LDR              r0,=max
  467 0000042C E5901000        ldr              r1,[r0]     ;r1=max
  468 00000430 E1A010A1        mov              r1,r1,LSR#1 ;r1=max/2
  469 00000434 E3510000        cmp              r1,#0       ;Si r1=0 --> r1 = 1
                                                            
  470 00000438 03A01001        moveq            r1,#1
  471 0000043C E5801000        stral            r1,[r0]
  472 00000440 EA000005        b                fin_RSI
  473 00000444         
  474 00000444         Boton7                               ;Si es el 7 multipl
                                                            icamos el valor de 
                                                            la variable max por
                                                             2 para que se muev
                                                            a más lento
  475 00000444 E59F005C        LDR              r0,=max
  476 00000448 E5901000        ldr              r1,[r0]     ;r1=max
  477 0000044C E1A01081        mov              r1,r1,LSL#1 ;r1=max*2
  478 00000450 E3510C01        cmp              r1,#256     ;Si r1>256 --> r1 =
                                                             256
  479 00000454 83A01C01        movhi            r1,#256
  480 00000458 E5801000        stral            r1,[r0]
  481 0000045C         
  482 0000045C         fin_RSI
  483 0000045C E8BD0007        POP              {r0-r2}
  484 00000460         
  485 00000460         ;retorno
  486 00000460 E321F0D2        msr              cpsr_c, #2_11010010 
                                                            ; modo irq I=1
  487 00000464 E49DE004        POP              {r14}
  488 00000468 E16FF00E        msr              spsr_fsxc,r14 ; spsr = cpsr(PP)
                                                            
  489 0000046C E59FE058        LDR              r14,=VICVectAddr
  490 00000470 E58EE000        str              r14,[r14]
  491 00000474 E8FD8000        POP              {pc}^       ; pc=@ret, ^--> cps
                                                            r = spsr modo super
                                                            visor
  492 00000478         
  493 00000478                 END
              FFFFF100 



ARM Macro Assembler    Page 17 


              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF010 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF014 
              E0004000 
              FFFFF030 
              E001C008 
              E001C018 
              FFFFF01C 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=prac5.d -oprac5.o -I"C:\
Program Files\ARM\INC" -I"C:\Program Files\ARM\INC\Philips" --predefine="__EVAL
 SETA 1" --list=prac5.lst prac5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Pantalla 00000224

Symbol: Pantalla
   Definitions
      At line 15 in file prac5.s
   Uses
      At line 65 in file prac5.s
      At line 208 in file prac5.s

Posicion_INI 0000021C

Symbol: Posicion_INI
   Definitions
      At line 13 in file prac5.s
   Uses
      At line 85 in file prac5.s
Comment: Posicion_INI used once
T_Saltos 00000200

Symbol: T_Saltos
   Definitions
      At line 12 in file prac5.s
   Uses
      At line 418 in file prac5.s
Comment: T_Saltos used once
boton_so 00000230

Symbol: boton_so
   Definitions
      At line 18 in file prac5.s
   Uses
      At line 38 in file prac5.s
      At line 340 in file prac5.s

columna_actual 0000023B

Symbol: columna_actual
   Definitions
      At line 23 in file prac5.s
   Uses
      At line 196 in file prac5.s
      At line 314 in file prac5.s

cuerpo 00000000

Symbol: cuerpo
   Definitions
      At line 11 in file prac5.s
   Uses
      At line 88 in file prac5.s
      At line 147 in file prac5.s
      At line 160 in file prac5.s
      At line 212 in file prac5.s
      At line 219 in file prac5.s
      At line 228 in file prac5.s
      At line 257 in file prac5.s
      At line 286 in file prac5.s

datos 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: datos
   Definitions
      At line 1 in file prac5.s
   Uses
      None
Comment: datos unused
dirx 00000238

Symbol: dirx
   Definitions
      At line 20 in file prac5.s
   Uses
      At line 198 in file prac5.s
      At line 301 in file prac5.s
      At line 430 in file prac5.s
      At line 439 in file prac5.s
      At line 451 in file prac5.s
      At line 460 in file prac5.s

diry 00000239

Symbol: diry
   Definitions
      At line 21 in file prac5.s
   Uses
      At line 186 in file prac5.s
      At line 303 in file prac5.s
      At line 433 in file prac5.s
      At line 442 in file prac5.s
      At line 448 in file prac5.s
      At line 457 in file prac5.s

fila_actual 0000023A

Symbol: fila_actual
   Definitions
      At line 22 in file prac5.s
   Uses
      At line 184 in file prac5.s
      At line 311 in file prac5.s

fin 0000023C

Symbol: fin
   Definitions
      At line 24 in file prac5.s
   Uses
      At line 102 in file prac5.s
      At line 424 in file prac5.s

flag_start 0000023E

Symbol: flag_start
   Definitions
      At line 26 in file prac5.s
   Uses
      At line 91 in file prac5.s
      At line 318 in file prac5.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 413 in file prac5.s

k 00000220

Symbol: k
   Definitions
      At line 14 in file prac5.s
   Uses
      At line 132 in file prac5.s
      At line 148 in file prac5.s
      At line 156 in file prac5.s
      At line 231 in file prac5.s
      At line 288 in file prac5.s
      At line 308 in file prac5.s

k_counter 0000023D

Symbol: k_counter
   Definitions
      At line 25 in file prac5.s
   Uses
      At line 125 in file prac5.s
      At line 140 in file prac5.s
      At line 305 in file prac5.s

max 00000234

Symbol: max
   Definitions
      At line 19 in file prac5.s
   Uses
      At line 110 in file prac5.s
      At line 466 in file prac5.s
      At line 475 in file prac5.s

reloj 0000022C

Symbol: reloj
   Definitions
      At line 17 in file prac5.s
   Uses
      At line 79 in file prac5.s
      At line 108 in file prac5.s
      At line 120 in file prac5.s
      At line 252 in file prac5.s
      At line 372 in file prac5.s

reloj_so 00000228

Symbol: reloj_so
   Definitions
      At line 16 in file prac5.s
   Uses
      At line 48 in file prac5.s
      At line 345 in file prac5.s

17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Boton1 000003A8

Symbol: Boton1
   Definitions
      At line 423 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton1 used once
Boton2 000003B8

Symbol: Boton2
   Definitions
      At line 429 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton2 used once
Boton3 000003D4

Symbol: Boton3
   Definitions
      At line 438 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton3 used once
Boton4 000003F0

Symbol: Boton4
   Definitions
      At line 447 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton4 used once
Boton5 0000040C

Symbol: Boton5
   Definitions
      At line 456 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton5 used once
Boton6 00000428

Symbol: Boton6
   Definitions
      At line 465 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton6 used once
Boton7 00000444

Symbol: Boton7
   Definitions
      At line 474 in file prac5.s
   Uses
      At line 12 in file prac5.s
Comment: Boton7 used once
Clrscr 00000054

Symbol: Clrscr



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 70 in file prac5.s
   Uses
      At line 73 in file prac5.s
Comment: Clrscr used once
RSI_boton 00000354

Symbol: RSI_boton
   Definitions
      At line 388 in file prac5.s
   Uses
      At line 44 in file prac5.s
Comment: RSI_boton used once
RSI_reloj 00000304

Symbol: RSI_reloj
   Definitions
      At line 354 in file prac5.s
   Uses
      At line 54 in file prac5.s
Comment: RSI_reloj used once
b_parpadeo1 00000228

Symbol: b_parpadeo1
   Definitions
      At line 265 in file prac5.s
   Uses
      At line 268 in file prac5.s
Comment: b_parpadeo1 used once
b_parpadeo2 00000238

Symbol: b_parpadeo2
   Definitions
      At line 272 in file prac5.s
   Uses
      At line 275 in file prac5.s
Comment: b_parpadeo2 used once
bfin 00000300

Symbol: bfin
   Definitions
      At line 351 in file prac5.s
   Uses
      At line 351 in file prac5.s
Comment: bfin used once
bucle 00000098

Symbol: bucle
   Definitions
      At line 102 in file prac5.s
   Uses
      At line 113 in file prac5.s
      At line 243 in file prac5.s

codigo 00000000

Symbol: codigo
   Definitions
      At line 29 in file prac5.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: codigo unused
comienzo 00000064

Symbol: comienzo
   Definitions
      At line 78 in file prac5.s
   Uses
      At line 94 in file prac5.s
      At line 323 in file prac5.s

fin_RSI 0000045C

Symbol: fin_RSI
   Definitions
      At line 482 in file prac5.s
   Uses
      At line 427 in file prac5.s
      At line 436 in file prac5.s
      At line 445 in file prac5.s
      At line 454 in file prac5.s
      At line 463 in file prac5.s
      At line 472 in file prac5.s

fin_bucle 000002D0

Symbol: fin_bucle
   Definitions
      At line 326 in file prac5.s
   Uses
      At line 105 in file prac5.s
Comment: fin_bucle used once
fin_for 00000200

Symbol: fin_for
   Definitions
      At line 243 in file prac5.s
   Uses
      At line 236 in file prac5.s
Comment: fin_for used once
fin_for2 00000280

Symbol: fin_for2
   Definitions
      At line 299 in file prac5.s
   Uses
      At line 293 in file prac5.s
Comment: fin_for2 used once
fin_while 00000158

Symbol: fin_while
   Definitions
      At line 184 in file prac5.s
   Uses
      At line 162 in file prac5.s
Comment: fin_while used once
for 000001E4




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: for
   Definitions
      At line 233 in file prac5.s
   Uses
      At line 241 in file prac5.s
Comment: for used once
for2 00000268

Symbol: for2
   Definitions
      At line 290 in file prac5.s
   Uses
      At line 297 in file prac5.s
Comment: for2 used once
inicio 00000000

Symbol: inicio
   Definitions
      At line 31 in file prac5.s
   Uses
      At line 30 in file prac5.s
Comment: inicio used once
no_aumenta 000000F4

Symbol: no_aumenta
   Definitions
      At line 137 in file prac5.s
   Uses
      At line 129 in file prac5.s
Comment: no_aumenta used once
no_borrar 00000124

Symbol: no_borrar
   Definitions
      At line 154 in file prac5.s
   Uses
      At line 143 in file prac5.s
Comment: no_borrar used once
parpadeo 00000220

Symbol: parpadeo
   Definitions
      At line 261 in file prac5.s
   Uses
      At line 280 in file prac5.s
Comment: parpadeo used once
si_choca 00000204

Symbol: si_choca
   Definitions
      At line 246 in file prac5.s
   Uses
      At line 240 in file prac5.s
Comment: si_choca used once
while 0000013C

Symbol: while
   Definitions
      At line 165 in file prac5.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 177 in file prac5.s
Comment: while used once
29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DATA_boton E001C008

Symbol: DATA_boton
   Definitions
      At line 9 in file prac5.s
   Uses
      At line 402 in file prac5.s
Comment: DATA_boton used once
T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 8 in file prac5.s
   Uses
      At line 368 in file prac5.s
Comment: T0_IR used once
TEC_CTR E001C018

Symbol: TEC_CTR
   Definitions
      At line 10 in file prac5.s
   Uses
      At line 405 in file prac5.s
Comment: TEC_CTR used once
VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 3 in file prac5.s
   Uses
      At line 334 in file prac5.s
Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 2 in file prac5.s
   Uses
      At line 58 in file prac5.s
Comment: VICIntEnable used once
VICSoftInt FFFFF018

Symbol: VICSoftInt
   Definitions
      At line 4 in file prac5.s
   Uses
      None
Comment: VICSoftInt unused
VICSoftIntClr FFFFF01C

Symbol: VICSoftIntClr
   Definitions
      At line 5 in file prac5.s
   Uses
      At line 409 in file prac5.s
Comment: VICSoftIntClr used once
VICVectAddr FFFFF030

Symbol: VICVectAddr



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 7 in file prac5.s
   Uses
      At line 383 in file prac5.s
      At line 489 in file prac5.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 6 in file prac5.s
   Uses
      At line 37 in file prac5.s
      At line 339 in file prac5.s

9 symbols
381 symbols in table
